// Code generated by go-swagger; DO NOT EDIT.

package campus

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateTasksHandlerFunc turns a function with the right signature into a create tasks handler
type CreateTasksHandlerFunc func(CreateTasksParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateTasksHandlerFunc) Handle(params CreateTasksParams) middleware.Responder {
	return fn(params)
}

// CreateTasksHandler interface for that can handle valid create tasks params
type CreateTasksHandler interface {
	Handle(CreateTasksParams) middleware.Responder
}

// NewCreateTasks creates a new http.Handler for the create tasks operation
func NewCreateTasks(ctx *middleware.Context, handler CreateTasksHandler) *CreateTasks {
	return &CreateTasks{Context: ctx, Handler: handler}
}

/*
	CreateTasks swagger:route POST /campus/{id}/tasks Campus createTasks

# Create campus tasks

Create campus tasks like onboarding steps, etc..
*/
type CreateTasks struct {
	Context *middleware.Context
	Handler CreateTasksHandler
}

func (o *CreateTasks) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateTasksParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
